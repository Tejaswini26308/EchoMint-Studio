# -*- coding: utf-8 -*-
"""EchoMint V2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KUXEKW4gYznasZjsjNX-45GBBgWeYSP-
"""

# prompt: generate a app by using streamlit+python or Html which performs  the features like wallpapers Category filter/search, font styles, full ringtone trimmer, ringtone categories(love, devotional,etc..), Dark/Light theme toggle

import streamlit as st
import os

# Ensure 'wallpapers' and 'ringtones' directories exist
if not os.path.exists("wallpapers"):
    os.makedirs("wallpapers")
    st.warning("The 'wallpapers' directory was created. Please add image files here.")

if not os.path.exists("ringtones"):
    os.makedirs("ringtones")
    st.warning("The 'ringtones' directory was created. Please add audio files here.")


# Function to list wallpapers in a directory
def get_wallpapers(category="all"):
    wallpapers = {}
    base_path = "wallpapers"  # Assume wallpapers are in a directory named "wallpapers"
    if not os.path.exists(base_path):
        # This part is now redundant due to the initial check, but kept for function's standalone use
        os.makedirs(base_path)
        st.warning("The 'wallpapers' directory was created. Please add image files here.")
        return {}

    for root, dirs, files in os.walk(base_path):
        current_category = os.path.basename(root) if root != base_path else "Uncategorized"
        if category == "all" or category.lower() == current_category.lower() or (category.lower() == "uncategorized" and root == base_path):
            for file in files:
                if file.lower().endswith(('.png', '.jpg', '.jpeg', '.gif', '.bmp')):
                    if current_category not in wallpapers:
                        wallpapers[current_category] = []
                    wallpapers[current_category].append(os.path.join(root, file))
    return wallpapers

# Function to list ringtones in a directory
def get_ringtones(category="all"):
    ringtones = {}
    base_path = "ringtones"  # Assume ringtones are in a directory named "ringtones"
    if not os.path.exists(base_path):
         # This part is now redundant due to the initial check, but kept for function's standalone use
        os.makedirs(base_path)
        st.warning("The 'ringtones' directory was created. Please add audio files here.")
        return {}

    for root, dirs, files in os.walk(base_path):
        current_category = os.path.basename(root) if root != base_path else "Uncategorized"
        if category == "all" or category.lower() == current_category.lower() or (category.lower() == "uncategorized" and root == base_path):
            for file in files:
                if file.lower().endswith(('.mp3', '.wav', '.ogg')):
                    if current_category not in ringtones:
                        ringtones[current_category] = []
                    ringtones[current_category].append(os.path.join(root, file))
    return ringtones

# Streamlit App
st.set_page_config(layout="wide")

st.title("Customization App")

# Dark/Light Theme Toggle (Using st.sidebar for better placement)
theme = st.sidebar.radio("Choose Theme", ["Light", "Dark"])
if theme == "Dark":
    st.markdown("""
        <style>
            body {
                color: #fff;
                background-color: #1e1e1e;
            }
            .stTextInput > div > div > input {
                color: #fff;
                background-color: #333;
            }
            .stSelectbox > div > div > div {
                 color: #fff;
                 background-color: #333;
            }
            .stRadio > div > label > div {
                 color: #fff;
            }
             .stButton > button {
                color: #fff;
                background-color: #555;
             }
            .stFileUploader label {
                color: #fff;
            }
            .stMarkdown {
                color: #fff;
            }
        </style>
    """, unsafe_allow_html=True)

# Font Styles (Basic Example)
st.sidebar.subheader("Font Styles (Basic)")
font_style = st.sidebar.selectbox("Select Font Style", ["Default", "Serif", "Monospace"])
if font_style == "Serif":
    st.markdown("<style>body {font-family: 'Georgia', serif;}</style>", unsafe_allow_html=True)
elif font_style == "Monospace":
    st.markdown("<style>body {font-family: 'Courier New', monospace;}</style>", unsafe_allow_html=True)
else:
    st.markdown("<style>body {font-family: 'sans-serif';}</style>", unsafe_allow_html=True)


# Wallpapers Section
st.header("Wallpapers")
wallpaper_categories = ["All"] + [d for d in os.listdir("wallpapers") if os.path.isdir(os.path.join("wallpapers", d))]
wallpaper_category = st.selectbox("Filter by Category", wallpaper_categories)
wallpaper_search_term = st.text_input("Search Wallpapers")

wallpapers = get_wallpapers("all" if wallpaper_category == "All" else wallpaper_category)

filtered_wallpapers = {}
for category, files in wallpapers.items():
    filtered_files = [file for file in files if wallpaper_search_term.lower() in os.path.basename(file).lower()]
    if filtered_files:
        filtered_wallpapers[category] = filtered_files

if filtered_wallpapers:
    for category, files in filtered_wallpapers.items():
        st.subheader(f"Category: {category}")
        cols = st.columns(5) # Display wallpapers in columns
        col_index = 0
        for wallpaper_path in files:
            with cols[col_index]:
                st.image(wallpaper_path, caption=os.path.basename(wallpaper_path), use_column_width=True)
            col_index = (col_index + 1) % 5
else:
    st.info("No wallpapers found for the selected category or search term.")

# Ringtones Section
st.header("Ringtones")

# Ringtone Categories
ringtone_categories_list = ["All"] + [d for d in os.listdir("ringtones") if os.path.isdir(os.path.join("ringtones", d))]
ringtone_category = st.selectbox("Filter Ringtones by Category", ringtone_categories_list)

ringtones = get_ringtones("all" if ringtone_category == "All" else ringtone_category)

if ringtones:
    for category, files in ringtones.items():
        st.subheader(f"Category: {category}")
        for ringtone_path in files:
            st.audio(ringtone_path, format='audio/mp3', start_time=0)
            # Basic Trimmer (Could be enhanced with more controls)
            st.write(f"**{os.path.basename(ringtone_path)}**")
            # More advanced trimming would require a library like pydub and a more complex UI
            # For a simple demo, we just provide the audio player.
else:
    st.info("No ringtones found for the selected category.")

st.markdown("---")
st.write("Note: This is a basic example. Advanced features like a full ringtone trimmer would require more complex implementation (e.g., using libraries like pydub and handling file uploads/processing).")
st.write("To add wallpapers, create a folder named `wallpapers` in the same directory as your app script, and place your image files inside. You can create subfolders within `wallpapers` to categorize them.")
st.write("To add ringtones, create a folder named `ringtones` in the same directory as your app script, and place your audio files inside. You can create subfolders within `ringtones` to categorize them.")

pip install streamlit